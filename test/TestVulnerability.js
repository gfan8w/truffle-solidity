const {
    shouldFail,
    constants,
    expectEvent,
    BN
} = require('openzeppelin-test-helpers');

const chai = require('chai');
chai.use(require('chai-as-promised'));
chai.should();

const VulnerabilityEtherStoreFactory = artifacts.require('VulnerabilityEtherStore');
const VulnerabilityAttackFactory = artifacts.require('VulnerabilityAttack');


contract('Vulnerability', accounts => {
    const [owner, alice, bob, eve, ...others] = accounts;
    console.log("owner address: ",owner);

    beforeEach(async () => {
        VulnerabilityEtherStore = await VulnerabilityEtherStoreFactory.new({from: owner});
        VulnerabilityAttack = await VulnerabilityAttackFactory.new(VulnerabilityEtherStore.address,{from: owner});

        console.log("VulnerabilityAttack address: ",VulnerabilityAttack.address);
    });



    describe('#attack()', () => {
        it('should get all 3 eth', async () => {

            await VulnerabilityEtherStore.deposit({ value: 1000000000000000000, from: alice});
            await VulnerabilityEtherStore.deposit({ value: 1000000000000000000, from: bob})
            //let b =await VulnerabilityEtherStore.getBalance();
            let balance = await web3.eth.getBalance(VulnerabilityEtherStore.address);
            console.log("balance is:",web3.utils.fromWei(balance, "ether"));

            let eve_balance = await web3.eth.getBalance(eve);
            console.log("eve's balance is:",web3.utils.fromWei(eve_balance, "ether"));

            await VulnerabilityAttack.attack({from:eve,value:web3.utils.toWei(new BN("1"),"ether")});
            let attack_balance = await web3.eth.getBalance(VulnerabilityAttack.address);
            console.log("attack balance is:",web3.utils.fromWei(attack_balance, "ether"));

        });
    });




});
